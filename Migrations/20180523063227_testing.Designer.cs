// <auto-generated />
using app.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace app.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20180523063227_testing")]
    partial class testing
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("app.Models.Bashkia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bashkia1")
                        .IsRequired()
                        .HasColumnName("Bashkia")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("IdQarku");

                    b.HasKey("Id");

                    b.HasIndex("IdQarku");

                    b.ToTable("Bashkia");
                });

            modelBuilder.Entity("app.Models.Njesia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("IdBashkia");

                    b.Property<string>("Njesia1")
                        .HasColumnName("Njesia")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("IdBashkia");

                    b.ToTable("Njesia");
                });

            modelBuilder.Entity("app.Models.Photos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Description");

                    b.Property<bool>("IsMain");

                    b.Property<string>("PublicId");

                    b.Property<string>("Url");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("app.Models.Qarku", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID");

                    b.Property<string>("Qarku1")
                        .IsRequired()
                        .HasColumnName("Qarku")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Qarku");
                });

            modelBuilder.Entity("app.Models.Qv", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Idnja");

                    b.Property<string>("Qv1")
                        .HasColumnName("Qv")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("Idnja");

                    b.ToTable("QV");
                });

            modelBuilder.Entity("app.Models.Roles", b =>
                {
                    b.Property<int>("RoleId");

                    b.Property<string>("Role")
                        .HasMaxLength(50);

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("app.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Atesi");

                    b.Property<DateTime>("Datelindja")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('0001-01-01T00:00:00.000')");

                    b.Property<string>("Email");

                    b.Property<string>("Emer");

                    b.Property<string>("Gjinia");

                    b.Property<int?>("IdBashkia");

                    b.Property<int?>("IdNjesia")
                        .HasColumnName("idNjesia");

                    b.Property<int?>("IdQarku");

                    b.Property<int?>("IdQv")
                        .HasColumnName("idQv");

                    b.Property<string>("Interests");

                    b.Property<string>("Introduction");

                    b.Property<DateTime>("LastActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('0001-01-01T00:00:00.000')");

                    b.Property<string>("Mbiemer");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<int?>("RoleId");

                    b.Property<string>("Telefon");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("IdBashkia");

                    b.HasIndex("IdNjesia");

                    b.HasIndex("IdQarku");

                    b.HasIndex("IdQv");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("app.Models.Values", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Values1")
                        .HasColumnName("Values");

                    b.HasKey("Id");

                    b.ToTable("Values");
                });

            modelBuilder.Entity("app.Models.Bashkia", b =>
                {
                    b.HasOne("app.Models.Qarku", "IdQarkuNavigation")
                        .WithMany("Bashkia")
                        .HasForeignKey("IdQarku")
                        .HasConstraintName("FK_Bashkia_Qarku");
                });

            modelBuilder.Entity("app.Models.Njesia", b =>
                {
                    b.HasOne("app.Models.Bashkia", "IdBashkiaNavigation")
                        .WithMany("Njesia")
                        .HasForeignKey("IdBashkia")
                        .HasConstraintName("FK_Njesia_Bashkia");
                });

            modelBuilder.Entity("app.Models.Photos", b =>
                {
                    b.HasOne("app.Models.Users", "User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("app.Models.Qv", b =>
                {
                    b.HasOne("app.Models.Njesia", "IdnjaNavigation")
                        .WithMany("Qv")
                        .HasForeignKey("Idnja")
                        .HasConstraintName("FK_QV_Njesia");
                });

            modelBuilder.Entity("app.Models.Users", b =>
                {
                    b.HasOne("app.Models.Bashkia", "IdBashkiaNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdBashkia")
                        .HasConstraintName("FK_Users_Bashkia");

                    b.HasOne("app.Models.Njesia", "IdNjesiaNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdNjesia")
                        .HasConstraintName("FK_Users_Njesia");

                    b.HasOne("app.Models.Qarku", "IdQarkuNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdQarku")
                        .HasConstraintName("FK_Users_Qarku");

                    b.HasOne("app.Models.Qv", "IdQvNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdQv")
                        .HasConstraintName("FK_Users_QV");

                    b.HasOne("app.Models.Roles", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Users_Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
